//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Datastructure {

    using XPCF.Core;
    using SolAR.Core;

public class DescriptorBuffer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal DescriptorBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DescriptorBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DescriptorBuffer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          solar_datastructurePINVOKE.delete_DescriptorBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DescriptorBuffer(global::System.IntPtr descriptorData, DescriptorBuffer.DescriptorType descriptor_type, DescriptorBuffer.DataType data_type, uint nb_elements, uint nb_descriptors) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_0(descriptorData, (int)descriptor_type, (int)data_type, nb_elements, nb_descriptors), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer(DescriptorBuffer.DescriptorType descriptor_type, DescriptorBuffer.DataType data_type, uint nb_elements, uint nb_descriptors) : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_1((int)descriptor_type, (int)data_type, nb_elements, nb_descriptors), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public DescriptorBuffer() : this(solar_datastructurePINVOKE.new_DescriptorBuffer__SWIG_2(), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNbDescriptors() {
    uint ret = solar_datastructurePINVOKE.DescriptorBuffer_getNbDescriptors(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DescriptorBuffer.DescriptorType getDescriptorType() {
    DescriptorBuffer.DescriptorType ret = (DescriptorBuffer.DescriptorType)solar_datastructurePINVOKE.DescriptorBuffer_getDescriptorType(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbElements() {
    uint ret = solar_datastructurePINVOKE.DescriptorBuffer_getNbElements(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DescriptorBuffer.DataType getDescriptorDataType() {
    DescriptorBuffer.DataType ret = (DescriptorBuffer.DataType)solar_datastructurePINVOKE.DescriptorBuffer_getDescriptorDataType(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getDescriptorByteSize() {
    uint ret = solar_datastructurePINVOKE.DescriptorBuffer_getDescriptorByteSize(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public global::System.IntPtr data() {
    global::System.IntPtr ret = solar_datastructurePINVOKE.DescriptorBuffer_data(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum DescriptorType {
    AKAZE,
    SIFT,
    SURF_64,
    SURF_128,
    ORB,
    SBPATTERN
  }

  public enum DataType {
    TYPE_8U = 1,
    TYPE_32F = 4
  }

}

}
