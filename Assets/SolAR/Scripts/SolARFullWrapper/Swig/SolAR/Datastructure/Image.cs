//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Datastructure {

    using XPCF.Core;
    using SolAR.Core;

public class Image : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Image(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Image() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          solar_datastructurePINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Image(Image.ImageLayout pixLayout, Image.PixelOrder pixOrder, Image.DataType type) : this(solar_datastructurePINVOKE.new_Image__SWIG_0((int)pixLayout, (int)pixOrder, (int)type), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(uint width, uint height, Image.ImageLayout pixLayout, Image.PixelOrder pixOrder, Image.DataType type) : this(solar_datastructurePINVOKE.new_Image__SWIG_1(width, height, (int)pixLayout, (int)pixOrder, (int)type), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(global::System.IntPtr imageData, uint width, uint height, Image.ImageLayout pixLayout, Image.PixelOrder pixOrder, Image.DataType type) : this(solar_datastructurePINVOKE.new_Image__SWIG_2(imageData, width, height, (int)pixLayout, (int)pixOrder, (int)type), true) {
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image copy() {
    global::System.IntPtr cPtr = solar_datastructurePINVOKE.Image_copy(swigCPtr);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSize(uint width, uint height) {
    solar_datastructurePINVOKE.Image_setSize__SWIG_0(swigCPtr, width, height);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSize(Sizei size) {
    solar_datastructurePINVOKE.Image_setSize__SWIG_1(swigCPtr, Sizei.getCPtr(size));
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getBufferSize() {
    uint ret = solar_datastructurePINVOKE.Image_getBufferSize(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public global::System.IntPtr data() {
    global::System.IntPtr ret = solar_datastructurePINVOKE.Image_data(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image.ImageLayout getImageLayout() {
    Image.ImageLayout ret = (Image.ImageLayout)solar_datastructurePINVOKE.Image_getImageLayout(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image.PixelOrder getPixelOrder() {
    Image.PixelOrder ret = (Image.PixelOrder)solar_datastructurePINVOKE.Image_getPixelOrder(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image.DataType getDataType() {
    Image.DataType ret = (Image.DataType)solar_datastructurePINVOKE.Image_getDataType(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbChannels() {
    uint ret = solar_datastructurePINVOKE.Image_getNbChannels(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbBitsPerComponent() {
    uint ret = solar_datastructurePINVOKE.Image_getNbBitsPerComponent(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sizei getSize() {
    Sizei ret = new Sizei(solar_datastructurePINVOKE.Image_getSize(swigCPtr), true);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getWidth() {
    uint ret = solar_datastructurePINVOKE.Image_getWidth(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHeight() {
    uint ret = solar_datastructurePINVOKE.Image_getHeight(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getStep() {
    uint ret = solar_datastructurePINVOKE.Image_getStep(swigCPtr);
    if (solar_datastructurePINVOKE.SWIGPendingException.Pending) throw solar_datastructurePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum DataType {
    TYPE_8U,
    TYPE_16U,
    TYPE_32U,
    TYPE_64U
  }

  public enum ImageLayout {
    LAYOUT_RGB = 0,
    LAYOUT_GRB,
    LAYOUT_BGR,
    LAYOUT_GREY,
    LAYOUT_RGBA,
    LAYOUT_RGBX,
    LAYOUT_UNDEFINED
  }

  public enum ColorSpace {
    SPACE_RGB_709 = 0,
    SPACE_GREY,
    SPACE_UNDEFINED
  }

  public enum PixelOrder {
    INTERLEAVED = 0,
    PER_CHANNEL
  }

}

}
