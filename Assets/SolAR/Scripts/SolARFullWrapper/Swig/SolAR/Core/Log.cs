//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Core {


public class Log : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Log(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Log obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Log() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          solar_corePINVOKE.delete_Log(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static void add_sink_file(CharList args) {
    solar_corePINVOKE.Log_add_sink_file(CharList.getCPtr(args));
    if (solar_corePINVOKE.SWIGPendingException.Pending) throw solar_corePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void add_sink_console() {
    solar_corePINVOKE.Log_add_sink_console();
    if (solar_corePINVOKE.SWIGPendingException.Pending) throw solar_corePINVOKE.SWIGPendingException.Retrieve();
  }

  public Log() : this(solar_corePINVOKE.new_Log(), true) {
    if (solar_corePINVOKE.SWIGPendingException.Pending) throw solar_corePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
