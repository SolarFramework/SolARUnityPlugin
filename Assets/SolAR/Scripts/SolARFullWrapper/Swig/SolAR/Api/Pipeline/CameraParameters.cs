//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Pipeline {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;
    using SolAR.Api.Sink;
    using SolAR.Api.Source;

public class CameraParameters : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CameraParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CameraParameters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CameraParameters() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          solar_api_pipelinePINVOKE.delete_CameraParameters(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int width {
    set {
      solar_api_pipelinePINVOKE.CameraParameters_width_set(swigCPtr, value);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = solar_api_pipelinePINVOKE.CameraParameters_width_get(swigCPtr);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int height {
    set {
      solar_api_pipelinePINVOKE.CameraParameters_height_set(swigCPtr, value);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = solar_api_pipelinePINVOKE.CameraParameters_height_get(swigCPtr);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float focalX {
    set {
      solar_api_pipelinePINVOKE.CameraParameters_focalX_set(swigCPtr, value);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = solar_api_pipelinePINVOKE.CameraParameters_focalX_get(swigCPtr);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float focalY {
    set {
      solar_api_pipelinePINVOKE.CameraParameters_focalY_set(swigCPtr, value);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = solar_api_pipelinePINVOKE.CameraParameters_focalY_get(swigCPtr);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int centerX {
    set {
      solar_api_pipelinePINVOKE.CameraParameters_centerX_set(swigCPtr, value);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = solar_api_pipelinePINVOKE.CameraParameters_centerX_get(swigCPtr);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int centerY {
    set {
      solar_api_pipelinePINVOKE.CameraParameters_centerY_set(swigCPtr, value);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = solar_api_pipelinePINVOKE.CameraParameters_centerY_get(swigCPtr);
      if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CameraParameters() : this(solar_api_pipelinePINVOKE.new_CameraParameters(), true) {
    if (solar_api_pipelinePINVOKE.SWIGPendingException.Pending) throw solar_api_pipelinePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
