//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Input.Devices {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;

public class ICamera : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ICamera(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_api_input_devicesPINVOKE.ICamera_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ICamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ICamera() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_api_input_devicesPINVOKE.delete_ICamera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual FrameworkReturnCode getNextImage(Image img) {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_input_devicesPINVOKE.ICamera_getNextImage(swigCPtr, Image.getCPtr(img));
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FrameworkReturnCode start() {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_input_devicesPINVOKE.ICamera_start(swigCPtr);
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FrameworkReturnCode stop() {
    FrameworkReturnCode ret = (FrameworkReturnCode)solar_api_input_devicesPINVOKE.ICamera_stop(swigCPtr);
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setResolution(Sizei resolution) {
    solar_api_input_devicesPINVOKE.ICamera_setResolution(swigCPtr, Sizei.getCPtr(resolution));
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setIntrinsicParameters(Matrix3x3f intrinsic_parameters) {
    solar_api_input_devicesPINVOKE.ICamera_setIntrinsicParameters(swigCPtr, Matrix3x3f.getCPtr(intrinsic_parameters));
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDistorsionParameters(Vector5f distorsion_parameters) {
    solar_api_input_devicesPINVOKE.ICamera_setDistorsionParameters(swigCPtr, Vector5f.getCPtr(distorsion_parameters));
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Sizei getResolution() {
    Sizei ret = new Sizei(solar_api_input_devicesPINVOKE.ICamera_getResolution(swigCPtr), true);
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Matrix3x3f getIntrinsicsParameters() {
    Matrix3x3f ret = new Matrix3x3f(solar_api_input_devicesPINVOKE.ICamera_getIntrinsicsParameters(swigCPtr), true);
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Vector5f getDistorsionParameters() {
    Vector5f ret = new Vector5f(solar_api_input_devicesPINVOKE.ICamera_getDistorsionParameters(swigCPtr), true);
    if (solar_api_input_devicesPINVOKE.SWIGPendingException.Pending) throw solar_api_input_devicesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
