//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR.Api.Display {

    using XPCF.Api;
    using SolAR.Core;
    using SolAR.Datastructure;

public class IMatchesOverlay : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IMatchesOverlay(global::System.IntPtr cPtr, bool cMemoryOwn) : base(solar_api_displayPINVOKE.IMatchesOverlay_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IMatchesOverlay obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IMatchesOverlay() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          solar_api_displayPINVOKE.delete_IMatchesOverlay(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void draw(Image image1, Image image2, Image outImage, Point2DfList points_image1, Point2DfList points_image2, DescriptorMatchVector matches) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_0(swigCPtr, Image.getCPtr(image1), Image.getCPtr(image2), Image.getCPtr(outImage), Point2DfList.getCPtr(points_image1), Point2DfList.getCPtr(points_image2), DescriptorMatchVector.getCPtr(matches));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void draw(Image image1, Image image2, Image outImage, Point2DfList points_image1, Point2DfList points_image2) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_1(swigCPtr, Image.getCPtr(image1), Image.getCPtr(image2), Image.getCPtr(outImage), Point2DfList.getCPtr(points_image1), Point2DfList.getCPtr(points_image2));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void draw(Image image1, Image image2, Image outImage, KeypointList keypoints_image1, KeypointList keypoints_image2, DescriptorMatchVector matches) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_2(swigCPtr, Image.getCPtr(image1), Image.getCPtr(image2), Image.getCPtr(outImage), KeypointList.getCPtr(keypoints_image1), KeypointList.getCPtr(keypoints_image2), DescriptorMatchVector.getCPtr(matches));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void draw(Image image1, Image image2, Image outImage, KeypointList keypoints_image1, KeypointList keypoints_image2) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_3(swigCPtr, Image.getCPtr(image1), Image.getCPtr(image2), Image.getCPtr(outImage), KeypointList.getCPtr(keypoints_image1), KeypointList.getCPtr(keypoints_image2));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void draw(Image image, Image outImage, Point2DfList points_image1, Point2DfList points_image2, DescriptorMatchVector matches) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_4(swigCPtr, Image.getCPtr(image), Image.getCPtr(outImage), Point2DfList.getCPtr(points_image1), Point2DfList.getCPtr(points_image2), DescriptorMatchVector.getCPtr(matches));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void draw(Image image, Image outImage, Point2DfList points_image1, Point2DfList points_image2) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_5(swigCPtr, Image.getCPtr(image), Image.getCPtr(outImage), Point2DfList.getCPtr(points_image1), Point2DfList.getCPtr(points_image2));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void draw(Image image, Image outImage, KeypointList keypoints_image1, KeypointList keypoints_image2, DescriptorMatchVector matches) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_6(swigCPtr, Image.getCPtr(image), Image.getCPtr(outImage), KeypointList.getCPtr(keypoints_image1), KeypointList.getCPtr(keypoints_image2), DescriptorMatchVector.getCPtr(matches));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void draw(Image image, Image outImage, KeypointList keypoints_image1, KeypointList keypoints_image2) {
    solar_api_displayPINVOKE.IMatchesOverlay_draw__SWIG_7(swigCPtr, Image.getCPtr(image), Image.getCPtr(outImage), KeypointList.getCPtr(keypoints_image1), KeypointList.getCPtr(keypoints_image2));
    if (solar_api_displayPINVOKE.SWIGPendingException.Pending) throw solar_api_displayPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
