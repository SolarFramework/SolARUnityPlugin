//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SolAR {

    using XPCF.Api;
    using SolAR.Api.Display;
    using SolAR.Api.Example;
    using SolAR.Api.Features;
    using SolAR.Api.Fusion;
    using SolAR.Api.Geom;
    using SolAR.Api.Image;
    using SolAR.Api.Input.Devices;
    using SolAR.Api.Input.Files;
    using SolAR.Api.Pipeline;
    using SolAR.Api.Reloc;
    using SolAR.Api.Sink;
    using SolAR.Api.Solver.Map;
    using SolAR.Api.Solver.Pose;
    using SolAR.Api.Source;

public class solar {
  public static IConfigurable bindTo_IConfigurable(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IConfigurable(IComponentIntrospect.getCPtr(component));
    IConfigurable ret = (cPtr == global::System.IntPtr.Zero) ? null : new IConfigurable(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I2DOverlay bindTo_I2DOverlay(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I2DOverlay(IComponentIntrospect.getCPtr(component));
    I2DOverlay ret = (cPtr == global::System.IntPtr.Zero) ? null : new I2DOverlay(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I3DOverlay bindTo_I3DOverlay(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I3DOverlay(IComponentIntrospect.getCPtr(component));
    I3DOverlay ret = (cPtr == global::System.IntPtr.Zero) ? null : new I3DOverlay(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I3DPointsViewer bindTo_I3DPointsViewer(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I3DPointsViewer(IComponentIntrospect.getCPtr(component));
    I3DPointsViewer ret = (cPtr == global::System.IntPtr.Zero) ? null : new I3DPointsViewer(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImageViewer bindTo_IImageViewer(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IImageViewer(IComponentIntrospect.getCPtr(component));
    IImageViewer ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImageViewer(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMatchesOverlay bindTo_IMatchesOverlay(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMatchesOverlay(IComponentIntrospect.getCPtr(component));
    IMatchesOverlay ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMatchesOverlay(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IInterface1 bindTo_IInterface1(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IInterface1(IComponentIntrospect.getCPtr(component));
    IInterface1 ret = (cPtr == global::System.IntPtr.Zero) ? null : new IInterface1(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IInterface2 bindTo_IInterface2(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IInterface2(IComponentIntrospect.getCPtr(component));
    IInterface2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new IInterface2(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IContoursExtractor bindTo_IContoursExtractor(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IContoursExtractor(IComponentIntrospect.getCPtr(component));
    IContoursExtractor ret = (cPtr == global::System.IntPtr.Zero) ? null : new IContoursExtractor(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IContoursFilter bindTo_IContoursFilter(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IContoursFilter(IComponentIntrospect.getCPtr(component));
    IContoursFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new IContoursFilter(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IDescriptorMatcher bindTo_IDescriptorMatcher(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IDescriptorMatcher(IComponentIntrospect.getCPtr(component));
    IDescriptorMatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDescriptorMatcher(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IDescriptorsExtractor bindTo_IDescriptorsExtractor(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IDescriptorsExtractor(IComponentIntrospect.getCPtr(component));
    IDescriptorsExtractor ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDescriptorsExtractor(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IDescriptorsExtractorSBPattern bindTo_IDescriptorsExtractorSBPattern(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IDescriptorsExtractorSBPattern(IComponentIntrospect.getCPtr(component));
    IDescriptorsExtractorSBPattern ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDescriptorsExtractorSBPattern(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IKeypointDetector bindTo_IKeypointDetector(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IKeypointDetector(IComponentIntrospect.getCPtr(component));
    IKeypointDetector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKeypointDetector(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IKeypointsReIndexer bindTo_IKeypointsReIndexer(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IKeypointsReIndexer(IComponentIntrospect.getCPtr(component));
    IKeypointsReIndexer ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKeypointsReIndexer(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMatchesFilter bindTo_IMatchesFilter(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMatchesFilter(IComponentIntrospect.getCPtr(component));
    IMatchesFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMatchesFilter(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ISBPatternReIndexer bindTo_ISBPatternReIndexer(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_ISBPatternReIndexer(IComponentIntrospect.getCPtr(component));
    ISBPatternReIndexer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ISBPatternReIndexer(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IVisualInertialFusion bindTo_IVisualInertialFusion(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IVisualInertialFusion(IComponentIntrospect.getCPtr(component));
    IVisualInertialFusion ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisualInertialFusion(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I2DTransform bindTo_I2DTransform(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I2DTransform(IComponentIntrospect.getCPtr(component));
    I2DTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new I2DTransform(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I3DTransform bindTo_I3DTransform(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I3DTransform(IComponentIntrospect.getCPtr(component));
    I3DTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new I3DTransform(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImage2WorldMapper bindTo_IImage2WorldMapper(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IImage2WorldMapper(IComponentIntrospect.getCPtr(component));
    IImage2WorldMapper ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImage2WorldMapper(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IUndistortPoints bindTo_IUndistortPoints(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IUndistortPoints(IComponentIntrospect.getCPtr(component));
    IUndistortPoints ret = (cPtr == global::System.IntPtr.Zero) ? null : new IUndistortPoints(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImageConvertor bindTo_IImageConvertor(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IImageConvertor(IComponentIntrospect.getCPtr(component));
    IImageConvertor ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImageConvertor(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImageFilter bindTo_IImageFilter(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IImageFilter(IComponentIntrospect.getCPtr(component));
    IImageFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImageFilter(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IImageLoader bindTo_IImageLoader(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IImageLoader(IComponentIntrospect.getCPtr(component));
    IImageLoader ret = (cPtr == global::System.IntPtr.Zero) ? null : new IImageLoader(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IPerspectiveController bindTo_IPerspectiveController(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IPerspectiveController(IComponentIntrospect.getCPtr(component));
    IPerspectiveController ret = (cPtr == global::System.IntPtr.Zero) ? null : new IPerspectiveController(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ICamera bindTo_ICamera(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_ICamera(IComponentIntrospect.getCPtr(component));
    ICamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new ICamera(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ICameraCalibration bindTo_ICameraCalibration(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_ICameraCalibration(IComponentIntrospect.getCPtr(component));
    ICameraCalibration ret = (cPtr == global::System.IntPtr.Zero) ? null : new ICameraCalibration(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IIMU bindTo_IIMU(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IIMU(IComponentIntrospect.getCPtr(component));
    IIMU ret = (cPtr == global::System.IntPtr.Zero) ? null : new IIMU(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMarker bindTo_IMarker(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMarker(IComponentIntrospect.getCPtr(component));
    IMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMarker(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMarker2DNaturalImage bindTo_IMarker2DNaturalImage(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMarker2DNaturalImage(IComponentIntrospect.getCPtr(component));
    IMarker2DNaturalImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMarker2DNaturalImage(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMarker2DSquared bindTo_IMarker2DSquared(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMarker2DSquared(IComponentIntrospect.getCPtr(component));
    IMarker2DSquared ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMarker2DSquared(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMarker2DSquaredBinary bindTo_IMarker2DSquaredBinary(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMarker2DSquaredBinary(IComponentIntrospect.getCPtr(component));
    IMarker2DSquaredBinary ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMarker2DSquaredBinary(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IPipeline bindTo_IPipeline(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IPipeline(IComponentIntrospect.getCPtr(component));
    IPipeline ret = (cPtr == global::System.IntPtr.Zero) ? null : new IPipeline(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IKeyframeRetriever bindTo_IKeyframeRetriever(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IKeyframeRetriever(IComponentIntrospect.getCPtr(component));
    IKeyframeRetriever ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKeyframeRetriever(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IRelocalizer bindTo_IRelocalizer(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IRelocalizer(IComponentIntrospect.getCPtr(component));
    IRelocalizer ret = (cPtr == global::System.IntPtr.Zero) ? null : new IRelocalizer(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ISinkPoseImage bindTo_ISinkPoseImage(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_ISinkPoseImage(IComponentIntrospect.getCPtr(component));
    ISinkPoseImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new ISinkPoseImage(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ISinkPoseTextureBuffer bindTo_ISinkPoseTextureBuffer(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_ISinkPoseTextureBuffer(IComponentIntrospect.getCPtr(component));
    ISinkPoseTextureBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ISinkPoseTextureBuffer(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IBundler bindTo_IBundler(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IBundler(IComponentIntrospect.getCPtr(component));
    IBundler ret = (cPtr == global::System.IntPtr.Zero) ? null : new IBundler(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IKeyframeSelector bindTo_IKeyframeSelector(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IKeyframeSelector(IComponentIntrospect.getCPtr(component));
    IKeyframeSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKeyframeSelector(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMapFilter bindTo_IMapFilter(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMapFilter(IComponentIntrospect.getCPtr(component));
    IMapFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMapFilter(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IMapper bindTo_IMapper(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IMapper(IComponentIntrospect.getCPtr(component));
    IMapper ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMapper(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ITriangulator bindTo_ITriangulator(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_ITriangulator(IComponentIntrospect.getCPtr(component));
    ITriangulator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ITriangulator(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I2D3DCorrespondencesFinder bindTo_I2D3DCorrespondencesFinder(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I2D3DCorrespondencesFinder(IComponentIntrospect.getCPtr(component));
    I2D3DCorrespondencesFinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new I2D3DCorrespondencesFinder(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I2Dto3DTransformDecomposer bindTo_I2Dto3DTransformDecomposer(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I2Dto3DTransformDecomposer(IComponentIntrospect.getCPtr(component));
    I2Dto3DTransformDecomposer ret = (cPtr == global::System.IntPtr.Zero) ? null : new I2Dto3DTransformDecomposer(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I2DTransformFinder bindTo_I2DTransformFinder(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I2DTransformFinder(IComponentIntrospect.getCPtr(component));
    I2DTransformFinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new I2DTransformFinder(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I3DTransformFinderFrom2D2D bindTo_I3DTransformFinderFrom2D2D(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I3DTransformFinderFrom2D2D(IComponentIntrospect.getCPtr(component));
    I3DTransformFinderFrom2D2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new I3DTransformFinderFrom2D2D(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I3DTransformFinderFrom2D3D bindTo_I3DTransformFinderFrom2D3D(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I3DTransformFinderFrom2D3D(IComponentIntrospect.getCPtr(component));
    I3DTransformFinderFrom2D3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new I3DTransformFinderFrom2D3D(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static I3DTransformSACFinderFrom2D3D bindTo_I3DTransformSACFinderFrom2D3D(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_I3DTransformSACFinderFrom2D3D(IComponentIntrospect.getCPtr(component));
    I3DTransformSACFinderFrom2D3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new I3DTransformSACFinderFrom2D3D(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IHomographyValidation bindTo_IHomographyValidation(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_IHomographyValidation(IComponentIntrospect.getCPtr(component));
    IHomographyValidation ret = (cPtr == global::System.IntPtr.Zero) ? null : new IHomographyValidation(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ISourceImage bindTo_ISourceImage(IComponentIntrospect component) {
    global::System.IntPtr cPtr = solarPINVOKE.bindTo_ISourceImage(IComponentIntrospect.getCPtr(component));
    ISourceImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new ISourceImage(cPtr, true);
    if (solarPINVOKE.SWIGPendingException.Pending) throw solarPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
