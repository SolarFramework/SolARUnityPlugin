//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XPCF.Collection {

	using System.Collections;
	using System.Collections.Generic;
	using XPCF.Core;
	using XPCF.Api;
	using XPCF.Properties;

public class PropertyEnumerable : global::System.IDisposable, IEnumerable<IProperty> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PropertyEnumerable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PropertyEnumerable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PropertyEnumerable() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xpcf_collectionPINVOKE.delete_PropertyEnumerable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual PropertyEnumerator getEnumerator() {
    global::System.IntPtr cPtr = xpcf_collectionPINVOKE.PropertyEnumerable_getEnumerator__SWIG_0(swigCPtr);
    PropertyEnumerator ret = (cPtr == global::System.IntPtr.Zero) ? null : new PropertyEnumerator(cPtr, true);
    if (xpcf_collectionPINVOKE.SWIGPendingException.Pending) throw xpcf_collectionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PropertyEnumerator getEnumerator(uint offset, uint chunkSize) {
    global::System.IntPtr cPtr = xpcf_collectionPINVOKE.PropertyEnumerable_getEnumerator__SWIG_1(swigCPtr, offset, chunkSize);
    PropertyEnumerator ret = (cPtr == global::System.IntPtr.Zero) ? null : new PropertyEnumerator(cPtr, true);
    if (xpcf_collectionPINVOKE.SWIGPendingException.Pending) throw xpcf_collectionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint size() {
    uint ret = xpcf_collectionPINVOKE.PropertyEnumerable_size(swigCPtr);
    if (xpcf_collectionPINVOKE.SWIGPendingException.Pending) throw xpcf_collectionPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

		public IEnumerator<IProperty> GetEnumerator() { return getEnumerator(); }
		IEnumerator IEnumerable.GetEnumerator() { return getEnumerator(); }
	
}

}
