//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XPCF.Threading {

    using XPCF.Core;

public class ITask : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ITask(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ITask obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ITask() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          xpcf_threadingPINVOKE.delete_ITask(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void start() {
    xpcf_threadingPINVOKE.ITask_start(swigCPtr);
    if (xpcf_threadingPINVOKE.SWIGPendingException.Pending) throw xpcf_threadingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void stop() {
    xpcf_threadingPINVOKE.ITask_stop(swigCPtr);
    if (xpcf_threadingPINVOKE.SWIGPendingException.Pending) throw xpcf_threadingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void process() {
    xpcf_threadingPINVOKE.ITask_process(swigCPtr);
    if (xpcf_threadingPINVOKE.SWIGPendingException.Pending) throw xpcf_threadingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void awaitStart() {
    xpcf_threadingPINVOKE.ITask_awaitStart(swigCPtr);
    if (xpcf_threadingPINVOKE.SWIGPendingException.Pending) throw xpcf_threadingPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool stopped() {
    bool ret = xpcf_threadingPINVOKE.ITask_stopped(swigCPtr);
    if (xpcf_threadingPINVOKE.SWIGPendingException.Pending) throw xpcf_threadingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
