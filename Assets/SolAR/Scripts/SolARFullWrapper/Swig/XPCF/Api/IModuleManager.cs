//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XPCF.Api {

    using XPCF.Core;
    using XPCF.Collection;
    using XPCF.Properties;
    using XPCF.Traits;

public class IModuleManager : IComponentIntrospect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IModuleManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(xpcf_apiPINVOKE.IModuleManager_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IModuleManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IModuleManager() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          xpcf_apiPINVOKE.delete_IModuleManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual ModuleMetadata introspectModule(string moduleName, string moduleFilePath) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IModuleManager_introspectModule(swigCPtr, moduleName, moduleFilePath);
    ModuleMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new ModuleMetadata(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual XPCFErrorCode saveModuleInformations(string xmlFilePath, ModuleMetadata moduleInfos) {
    XPCFErrorCode ret = (XPCFErrorCode)xpcf_apiPINVOKE.IModuleManager_saveModuleInformations(swigCPtr, xmlFilePath, ModuleMetadata.getCPtr(moduleInfos));
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IComponentIntrospect createComponent(ModuleMetadata moduleInfos, UUID componentUUID) {
    global::System.IntPtr cPtr = xpcf_apiPINVOKE.IModuleManager_createComponent(swigCPtr, ModuleMetadata.getCPtr(moduleInfos), UUID.getCPtr(componentUUID));
    IComponentIntrospect ret = (cPtr == global::System.IntPtr.Zero) ? null : new IComponentIntrospect(cPtr, true);
    if (xpcf_apiPINVOKE.SWIGPendingException.Pending) throw xpcf_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
